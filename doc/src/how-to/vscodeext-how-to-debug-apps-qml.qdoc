// Copyright (C) 2025 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page vscodeext-how-debug-apps-qml.html
    \previouspage vscodeext-how-tos.html
    \nextpage vscodeext-reference.html

    \ingroup vscodeext-how-to-qml

    \title Debug Qt Quick applications

    You can debug Qt Quick applications that contain both QML and C/C++ code with
    the QML debugger and the debugger for your operating system. Usually, you use
    GDB on Linux and \macos or the Visual Studio Windows debugger on Windows.

    When using the QML debugger, you can:

    \list
        \li Show variables including the \e {This} variable
        \li Manipulate values of variables
        \li Add watch expressions
        \li Add conditional breakpoints
        \li Add expression evaluation
    \endlist

    \note Debugging requires opening a socket at a TCP port, which presents a
    security risk. Anyone on the internet could connect to the application that
    you are debugging and execute any JavaScript functions. Therefore, you must
    make sure that the port is properly protected by a firewall.

    \section1 Launch and debug applications

    To debug only the QML code in an application, you can first start the
    application and then attach the QML debugger to it.

    To launch and debug Qt Quick applications:

    \list 1
        \li Create a \c {launch.json} file for the project. For more information,
            see \l {Debug Qt applications}.
        \li Select \uicontrol {QML debugger}.
        \li Select the \uicontrol {Qt: QML: Launch} debug configuration.
    \endlist

    The launch debug configuration adds the following lines to the
    \c {launch.json} file:

    \badcode
    "configurations": [
        {
            "name": "Qt: QML: Launch",
            "type": "qml",
            "request": "launch",
            "program": "${command:cmake.launchTargetPath}"
        },
        {
            "name": "Qt: QML: Attach by port",
            "type": "qml",
            "request": "attach",
            "host": "localhost",
            "port": "^\"Custom port or \\${command:qt-qml.debugPort} for compound usage\""
        }
    ]
    \endcode

    \section1 Attach to running applications

    To only debug the QML code in an application, it is faster to attach the
    debugger to a running application using a fixed port number than to have
    \QVSC first start the application and then attach the QML debugger to it.

    To debug only QML code:

    \list 1
        \li Create a \e {launch.json} file for the project. For more information,
            see \l {Debug Qt applications}.
        \li Select \uicontrol {Add Configuration}, and then select the
            \uicontrol {Qt: QML: Attach by port} debug configuration.
        \li In the \uicontrol Terminal, start the application with the following
            arguments:
            \badcode
            <your_executable_path> -qmljsdebugger=host:<IP_address>,port:<port_number>,block,services:DebugMessages,QmlDebugger,V8Debugger,QmlInspector
            \endcode
            Where \e IP_address is the IP address of the host where the
            application is running, \e port_number is the debugging port,
            and block prevents the application from running until the debug
            client connects to the server. This enables debugging from the start.
        \li Set the port number as the value of the \c port option in the
            \e {launch.json} file:
            \badcode
            "configurations": [
                {
                    "name": "Qt: QML: Attach by port",
                    "type": "qml",
                    "request": "attach",
                    "host": "localhost",
                    "port": "<port_number>"
                },
            \endcode
    \endlist

    \section1 Set build folders

    If a build folder is outside the workspace folder, \QVSC needs to know
    where it is to find QRC files that match virtual and psychical QML files.
    To set build folders, add them to the \uicontrol {Qt: QML: Launch} or
    \uicontrol {Qt: QML: Attach by port} debug configuration as values of
    \c {buildDirs}.

    For example:

    \badcode
    "configurations": [
        {
            "name": "Qt: QML: Launch",
            "type": "qml",
            "request": "launch",
            "program": "${command:cmake.launchTargetPath}",
            "buildDirs": [
                 "<my_build_folder_outside_workspace>",
                 "<my_build_folder_outside_workspace_2>",
             ]
        }
    ]
    \endcode

    \section1 Override default arguments

    To override default debugger arguments, add arguments to the
    \uicontrol {Qt: QML: Launch} or \uicontrol {Qt: QML: Attach by port} debug
    configuration as values of \c {debuggerArgs}.

    For example:

    \badcode
    "configurations": [
        {
            "name": "Qt: QML: Launch",
            "type": "qml",
            "request": "launch",
            "program": "${command:cmake.launchTargetPath}",
            "debuggerArgs": "-qmljsdebugger=<arguments>",
        }
    ]
    \endcode

    \section1 Pass arguments to the executable

    To pass arguments to the executable, add them to the
    \uicontrol {Qt: QML: Launch} or \uicontrol {Qt: QML: Attach by port}
    debug configuration as values of \c {args}.

    For example:

    \badcode
    "configurations": [
        {
            "name": "Qt: QML: Launch",
            "type": "qml",
            "request": "launch",
            "program": "${command:cmake.launchTargetPath}",
            "args": [
                "<argument>",
                "<argument>    <argument>",
            ]
        }
    ]
    \endcode

    \section1 Debug mixed C/C++ and QML code

    You can create a debug configuration that first starts an application and
    then attaches both the QML and C/C++ debugger to it using a port number that
    the \uicontrol {Qt: Acquire Port} pre-launch task acquires.

    To debug a Qt Quick application that contains both C/C++ and QML code:

    \list 1
        \li Open a \e {launch.json} file. For more information, see
            \l {Debug Qt applications}.
        \li Select \uicontrol {Add Configuration}, and then select the
            \uicontrol {Qt: Debug with cppdbg and QML debugger} or
            \uicontrol {Qt: Debug with cppvsdbg and QML debugger (Windows)}
            debug configuration that matches your debugger.
        \li Add a compound launch and pre-launch task for C++/QML debugging
            to the \e {launch.json} file:

            \if defined(onlinedocs)
                \tab {tab-compound-debugging}{linux}{Linux and \macos}{}
                \tab {tab-compound-debugging}{windows}{Windows}{checked}
                \tabcontent {linux}
            \else
                On Linux and \macos with GDB:
            \endif

            \badcode
            "compounds": [
                    {
                        "name": "C++/QML",
                        "configurations": ["Qt: Debug with cppdbg and QML debugger", "Qt: QML: Attach by port"],
                        "preLaunchTask": "Qt: Acquire Port",
                    }
                ]
            \endcode

            \if defined(onlinedocs)
                \endtabcontent
                \tabcontent {windows}
            \else
                On Windows with the Visual Studio Windows debugger:
            \endif

            \badcode
            "compounds": [
                    {
                        "name": "C++/QML",
                        "configurations": ["Qt: Debug with cppvsdbg and QML debugger (Windows)", "Qt: QML: Attach by port"],
                        "preLaunchTask": "Qt: Acquire Port",
                    }
                ]
            \endcode

            \if defined(onlinedocs)
                \endtabcontent
            \endif

       \endlist

    \sa {Debug Qt applications}, {VS Code: Debugging}
*/
